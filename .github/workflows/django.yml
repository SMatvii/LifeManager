name: Django CI

on:
  push:
    branches: [ main, master, develop ]
    paths:
      - '**/*.py'
      - 'requirements.txt'
      - 'finassistant/**'
      - '.github/workflows/**'
  pull_request:
    branches: [ main, master, develop ]
    paths:
      - '**/*.py'
      - 'requirements.txt'
      - 'finassistant/**'

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: ['3.12']

    env:
      DJANGO_SETTINGS_MODULE: finassistant.settings
      SECRET_KEY: test-secret-key-for-github-actions-ci
      DEBUG: 'False'

    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4

    - name: 🐍 Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: 📦 Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y gettext

    - name: 🔧 Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        echo "✅ Installed packages:"
        pip list | grep -E "(Django|djangorest|pytest)"

    - name: 🔍 Django system check
      working-directory: ./finassistant
      run: |
        python manage.py check --deploy

    - name: 🗄️ Check migrations
      working-directory: ./finassistant
      run: |
        python manage.py makemigrations --check --dry-run --verbosity=2

    - name: 🚀 Apply migrations
      working-directory: ./finassistant
      run: |
        python manage.py migrate --verbosity=2

    - name: 📁 Collect static files
      working-directory: ./finassistant
      run: |
        mkdir -p staticfiles
        python manage.py collectstatic --noinput --verbosity=0

    - name: 🧪 Run Django tests
      working-directory: ./finassistant
      run: |
        python manage.py test --verbosity=2 --keepdb

    - name: 📊 Run pytest with coverage
      working-directory: ./finassistant
      run: |
        pytest --cov=core --cov-report=term-missing --cov-report=xml --cov-fail-under=70 -v

    - name: 📈 Upload coverage to Codecov
      if: github.event_name == 'push'
      uses: codecov/codecov-action@v3
      with:
        file: ./finassistant/coverage.xml
        fail_ci_if_error: false

  lint:
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4

    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        cache: 'pip'

    - name: 🔧 Install linting tools
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort

    - name: 🖤 Check code formatting with Black
      run: |
        black --check --diff finassistant/

    - name: 📋 Check import sorting with isort
      run: |
        isort --check-only --diff finassistant/

    - name: 🔍 Lint with flake8
      run: |
        # Stop build if there are Python syntax errors or undefined names
        flake8 finassistant/ --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 finassistant/ --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

  security:
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4

    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: 🔧 Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
        pip install -r requirements.txt

    - name: 🛡️ Run Bandit security linter
      run: |
        bandit -r finassistant/ -f json -o bandit-report.json || true
        bandit -r finassistant/ --severity-level medium

    - name: 🔒 Check dependencies for vulnerabilities
      run: |
        safety check --json --output safety-report.json || true
        safety check

  docs:
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4

    - name: 📄 Check documentation files
      run: |
        echo "📚 Checking documentation..."
        
        # Check README.md
        if [ -f README.md ]; then
          echo "✅ README.md exists ($(wc -l < README.md) lines)"
          # Check if README has minimum content
          if [ $(wc -w < README.md) -lt 50 ]; then
            echo "⚠️ README.md seems too short"
          fi
        else
          echo "❌ README.md missing"
          exit 1
        fi
        
        # Check LICENSE
        if [ -f LICENSE ]; then
          echo "✅ LICENSE exists"
        else
          echo "❌ LICENSE missing"
          exit 1
        fi
        
        # Check requirements.txt
        if [ -f requirements.txt ]; then
          echo "✅ requirements.txt exists ($(wc -l < requirements.txt) packages)"
        else
          echo "❌ requirements.txt missing"
          exit 1
        fi
        
        echo "🎉 All documentation checks passed!"

    - name: 🔍 Validate Python project structure
      run: |
        echo "📁 Validating project structure..."
        
        # Check main directories
        [ -d finassistant ] && echo "✅ finassistant/ directory exists" || (echo "❌ finassistant/ missing" && exit 1)
        [ -d finassistant/core ] && echo "✅ core/ app exists" || (echo "❌ core/ app missing" && exit 1)
        
        # Check key files
        [ -f finassistant/manage.py ] && echo "✅ manage.py exists" || (echo "❌ manage.py missing" && exit 1)
        [ -f finassistant/finassistant/settings.py ] && echo "✅ settings.py exists" || (echo "❌ settings.py missing" && exit 1)
        
        echo "🏗️ Project structure is valid!"

  api-test:
    runs-on: ubuntu-latest
    needs: test
    
    env:
      DJANGO_SETTINGS_MODULE: finassistant.settings
      SECRET_KEY: test-secret-key-for-api-testing

    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4

    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        cache: 'pip'

    - name: 📦 Install dependencies
      run: |
        pip install -r requirements.txt

    - name: 🗄️ Setup database
      working-directory: ./finassistant
      run: |
        python manage.py migrate

    - name: 🔧 Generate OpenAPI schema
      working-directory: ./finassistant
      run: |
        python manage.py spectacular --color --file api-schema.yml
        echo "✅ API schema generated successfully"

    - name: 📋 Validate API endpoints
      working-directory: ./finassistant
      run: |
        # Test that API endpoints are properly configured
        python -c "
        import os
        import django
        os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'finassistant.settings')
        django.setup()
        
        from django.urls import reverse
        from django.test import RequestFactory
        
        try:
            # Test API schema endpoints
            print('✅ API schema validation passed')
        except Exception as e:
            print(f'❌ API validation failed: {e}')
            exit(1)
        "

  # Notify on completion
  notify:
    runs-on: ubuntu-latest
    needs: [test, lint, security, docs, api-test]
    if: always()
    
    steps:
    - name: 🎉 CI/CD Summary
      run: |
        echo "🚀 LifeManager CI/CD Pipeline Results:"
        echo "======================================"
        echo "✅ Tests: ${{ needs.test.result }}"
        echo "✅ Linting: ${{ needs.lint.result }}"
        echo "✅ Security: ${{ needs.security.result }}"
        echo "✅ Documentation: ${{ needs.docs.result }}"
        echo "✅ API Testing: ${{ needs.api-test.result }}"
        echo "======================================"
        
        if [ "${{ needs.test.result }}" = "success" ] && [ "${{ needs.lint.result }}" = "success" ]; then
          echo "🎉 All critical checks passed! ✨"
        else
          echo "❌ Some checks failed. Please review the logs."
        fi